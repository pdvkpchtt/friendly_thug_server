// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// сессия
model session {
  sid    String   @id
  sess   String
  expire DateTime

  @@index([expire], map: "IDX_session_expire")
}

// Пользователь
model User {
  id             String         @id @default(cuid())
  email          String         @unique
  username       String?        
  emailVerified  DateTime?      @map("email_verified")
  password       String?
  UserProject    UserProject[]
  createdAt      DateTime       @default(now())

  @@map("users")
}

// Проект (как в Figma, пользователь создает проект и приглашает других юзеров в него)
model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  UserProject UserProject[]
  Page        Page[]
  createdAt   DateTime      @default(now())

  @@map("projects")
}


// М:М таблица для связи юзеров и проектов, т.к. много пользователей могут состоять в разных проектах
model UserProject {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@map("user_projects")
}

// // Словарь распространенных разрешений экранов, который можно дополнять кастомными значениями
// model ViewPort {
//   id        String        @id @default(cuid())
//   title     String
//   type      ViewPortType  @default(DEFAULT)
//   width     Int
//   height    Int
//   projectId String
//   project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   createdAt DateTime      @default(now())

//   @@map("view_ports")
// }

// Страницы в проекте (в проекте много страниц, для которых создаются тесты)
model Page {
  id          String      @id @default(cuid())
  title       String
  url         String
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  viewportId  String
  viewport    ViewPort     @relation(fields: [viewportId], references: [id], onDelete: Cascade)
  Test        Test[]
  WebElement  WebElement[]
  Folder      Folder[]
  createdAt   DateTime    @default(now())

  @@map("pages")
}

// Список разрешений экрана
model ViewPort {
  id          String      @id @default(cuid())
  title       String
  width       Int
  height      Int
  createdAt   DateTime    @default(now())
  page        Page[]

  @@map("ViewPort")
}

// Список веб-элементов (справочник)
model WebElement {
  id                 String   @id @default(cuid())
  title              String
  selector           String
  pageId             String
  fromEnv            Boolean  @default(false)
  page               Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  Step               Step[]

  createdAt DateTime @default(now())

  @@map("web_elements")
}

// Словарь Ation'ов
model WebElementActions {
  id         String   @id @default(cuid())
  name       String
  withValue  Boolean  @default(true)
  Step       Step[]
 
  @@map("web_elements_actions")
}

// папки для тестов
model Folder {
  id        String   @id @default(cuid())
  title     String
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parentId  String?
  Tests     Test[]
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
 
  @@map("folder")
}

// Тесты для страниц
model Test {
  id        String   @id @default(cuid())
  title     String
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  Step      Step[]
  Report    Report[]
  createdAt DateTime @default(now())
  folderId  String?
  folder    Folder? @relation(fields: [folderId], references: [id])

  isRunning Boolean @default(false)

  @@map("tests")
}

// Шаги, создающиеся юзером при формировании теста
model Step {
  id            String                @id @default(cuid())
  value         String
  testId        String
  test          Test                  @relation(fields: [testId], references: [id], onDelete: Cascade)
  webElementId  String
  webElement    WebElement            @relation(fields: [webElementId], references: [id], onDelete: Cascade)
  actionId      String
  action        WebElementActions     @relation(fields: [actionId], references: [id], onDelete: Cascade)
  createdAt     DateTime              @default(now())

  @@map("steps")
}

// Отчеты, формирующиеся после прогона тестов
model Report {
  id          String       @id @default(cuid())
  testId      String
  test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  status      Boolean      @default(false)
  executionTime Int?
  ReportStep  ReportStep[]
  createdAt   DateTime     @default(now())

  @@map("reports")
}

// М:М модель для логирования выполнения шагов при прогоне теста
model ReportStep {
  id          String      @id @default(cuid())
  value       String
  reportId    String
  report      Report      @relation(fields: [reportId], references: [id], onDelete: Cascade)
  status      Boolean     @default(false)
  Screenshot  Screenshot?
  createdAt   DateTime    @default(now())

  @@map("report_steps")
}

// Модель для хранения скринов, делающихся во время тестов
model Screenshot {
  id            String      @id @default(cuid())
  data          String
  reportStepId  String      @unique
  reportStep    ReportStep  @relation(fields: [reportStepId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@map("screenshots")
}

// Токен для подтверждения почты и верификации почты
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

// Токен для приглашения юзера в проект
model InviteToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("invite_tokens")
}

// Токен для приглашения юзера в проект
model PasswordRestorationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_restoration_tokens")
}

// // Типы вьюпортов (по умолчанию или кастомные)
// enum ViewPortType {
//   DEFAULT
//   CUSTOM
// }