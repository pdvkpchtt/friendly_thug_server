function reportToHtml(data) {
  let resultHTML = "";

  // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ Report
  const latestReport = data.Report?.[data.Report.length - 1];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—á—ë—Ç
  if (!latestReport) return "";

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
  resultHTML += `<p class="heading">–¢–µ—Å—Ç ¬´${data.title}¬ª ${
    latestReport.status ? "–ø—Ä–æ–π–¥–µ–Ω" : "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
  }</p>\n\n`;

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —à–∞–≥–∞–º –æ—Ç—á–µ—Ç–∞
  latestReport.ReportStep.forEach((step) => {
    const stepText = step.value;

    const statusEmoji = step.status ? "‚úÖ" : "‚ùå";

    // –ò—â–µ–º URL –≤ —Ç–µ–∫—Å—Ç–µ —à–∞–≥–∞
    const urlMatch = stepText.match(/https?:\/\/[^\s"]+/);

    let formattedStep = stepText;

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ ‚Äî –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ <a> —Ç–µ–≥
    if (urlMatch) {
      const url = urlMatch[0];
      formattedStep = stepText.replace(
        url,
        `<a target="_blank" href="${url}" style="color: #68ebb0">üîó–°—Å—ã–ª–∫–∞</a>`
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultHTML += `      <p class="text">${statusEmoji} ${formattedStep}</p>\n`;
  });

  return resultHTML.trim();
}

module.exports = reportToHtml;
