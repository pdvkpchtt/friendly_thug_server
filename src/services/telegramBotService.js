const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const temp = require('temp');
const axios = require('axios');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
temp.track();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logBot = (message, data = null) => {
  const timestamp = new Date().toISOString();
  const logMessage = `[TELEGRAM_BOT] ${timestamp} - ${message}`;
  console.log(logMessage);
  if (data) {
    console.log('[TELEGRAM_BOT] Data:', JSON.stringify(data, null, 2));
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
const getSubscriptionPlan = () => {
  return process.env.SUBSCRIPTION_PLAN || 'start';
};

const isPlanEnabled = (feature) => {
  const plan = getSubscriptionPlan();
  
  switch (feature) {
    case 'telegram_bot':
      return plan === 'standard' || plan === 'pro';
    case 'manual_run':
      return plan === 'standard' || plan === 'pro';
    case 'scheduled_run':
      return plan === 'start' || plan === 'standard' || plan === 'pro';
    case 'email_notifications':
      return plan === 'start' || plan === 'standard' || plan === 'pro';
    case 'analytics_week':
      return plan === 'standard' || plan === 'pro';
    case 'analytics_6months':
      return plan === 'pro';
    case 'ci_cd':
      return plan === 'pro';
    default:
      return false;
  }
};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ markdown-–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ ---
function returnHyperlink(text = '', hyperlink = '–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞') {
  const urlPattern = /https?:\/\/(?:www\.)?[^\s]+|www\.[^\s]+/g;
  return text.replace(urlPattern, (url) => {
    let urlWithProtocol = url;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      urlWithProtocol = 'https://' + url;
    }
    return `[üîó ${hyperlink}](${urlWithProtocol})`;
  });
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ URL –Ω–∞ markdown-–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É, –Ω–µ –≤—Å—é —Å—Ç—Ä–æ–∫—É ---
function replaceUrlWithHyperlink(text, hyperlink = '–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞') {
  const urlPattern = /https?:\/\/(?:www\.)?[^\s]+|www\.[^\s]+/g;
  return text.replace(urlPattern, (url) => {
    let urlWithProtocol = url;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      urlWithProtocol = 'https://' + url;
    }
    return `[üîó ${hyperlink}](${urlWithProtocol})`;
  });
}

class TelegramBotService {
  constructor() {
    this.bot = null;
    this.isRunning = false;
  }

  async initialize() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Telegram –±–æ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if (!isPlanEnabled('telegram_bot')) {
      logBot('Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ START. –¢–æ–ª—å–∫–æ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
      return;
    }

    if (!process.env.TELEGRAM_BOT_TOKEN) {
      logBot('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
      return;
    }

    try {
      logBot('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
      this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
      this.setupHandlers();
      this.isRunning = true;
      logBot('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      logBot('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error.message);
    }
  }

  setupHandlers() {
    logBot('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...');
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, this.handleStart.bind(this));

    // –ö–æ–º–∞–Ω–¥–∞ /runtests (—Ç–æ–ª—å–∫–æ –¥–ª—è standard –∏ pro)
    if (isPlanEnabled('manual_run')) {
      this.bot.onText(/\/runtests/, this.handleRunTests.bind(this));
    }

    // –ö–æ–º–∞–Ω–¥–∞ /analysis (—Ç–æ–ª—å–∫–æ –¥–ª—è standard –∏ pro)
    if (isPlanEnabled('analytics_week')) {
      this.bot.onText(/\/analysis/, this.handleAnalysis.bind(this));
    }

    // –ö–æ–º–∞–Ω–¥–∞ /subscription
    this.bot.onText(/\/subscription/, this.handleSubscription.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', this.handleMessage.bind(this));

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    this.setCommands();
    
    logBot('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  async setCommands() {
    try {
      const commands = [
        { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'subscription', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ' }
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
      if (isPlanEnabled('manual_run')) {
        commands.push({ command: 'runtests', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã' });
      }
      
      if (isPlanEnabled('analytics_week')) {
        commands.push({ command: 'analysis', description: '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É' });
      }

      await this.bot.setMyCommands(commands);
      logBot('–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      logBot('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', error.message);
    }
  }

  async showMainMenu(chatId) {
    const plan = getSubscriptionPlan();
    let keyboard = {
      reply_markup: {
        keyboard: [],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    const firstRow = [];
    if (isPlanEnabled('manual_run')) {
      firstRow.push('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤');
    }
    
    if (isPlanEnabled('analytics_week')) {
      firstRow.push('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    if (firstRow.length > 0) {
      keyboard.reply_markup.keyboard.push(firstRow);
    }
    
    // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard.reply_markup.keyboard.push(['–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏']);

    let menuText = `*QAI.Agent - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* üöÄ\n\n`;
    menuText += `üìã *–í–∞—à —Ç–∞—Ä–∏—Ñ:* ${plan.toUpperCase()}\n\n`;
    menuText += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await this.bot.sendMessage(chatId, menuText, { 
      ...keyboard,
      parse_mode: 'Markdown'
    });
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    logBot(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.id}`);
    
    await this.showMainMenu(chatId);
    logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${msg.from?.id}`);
  }

  async handleRunTests(msg) {
    if (!isPlanEnabled('manual_run')) {
      const chatId = msg.chat.id;
      await this.bot.sendMessage(chatId, '‚ùå *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö STANDARD –∏ PRO', { 
        parse_mode: 'Markdown' 
      });
      return;
    }

    const chatId = msg.chat.id;
    logBot(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /runtests –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.id}`);
    
    await this.startTests(chatId);
  }

  async handleAnalysis(msg) {
    if (!isPlanEnabled('analytics_week')) {
      const chatId = msg.chat.id;
      await this.bot.sendMessage(chatId, '‚ùå *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö STANDARD –∏ PRO', { 
        parse_mode: 'Markdown' 
      });
      return;
    }

    const chatId = msg.chat.id;
    logBot(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /analysis –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.id}`);
    
    await this.showAnalysis(chatId);
  }

  async handleSubscription(msg) {
    const chatId = msg.chat.id;
    logBot(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /subscription –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.id}`);
    
    await this.showSubscription(chatId);
  }

  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    logBot(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.id}: ${text}`);

    if (text === '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤') {
      if (!isPlanEnabled('manual_run')) {
        await this.bot.sendMessage(chatId, '‚ùå *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö STANDARD –∏ PRO', { 
          parse_mode: 'Markdown' 
        });
        return;
      }
      await this.startTests(chatId);
    } else if (text === '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞') {
      if (!isPlanEnabled('analytics_week')) {
        await this.bot.sendMessage(chatId, '‚ùå *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö STANDARD –∏ PRO', { 
          parse_mode: 'Markdown' 
        });
        return;
      }
      await this.showAnalysis(chatId);
    } else if (text === '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏') {
      await this.showSubscription(chatId);
    } else if (text === '–ù–∞–∑–∞–¥') {
      await this.showMainMenu(chatId);
    } else if (text === '–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å' || text === '–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é' || 
               text === '–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü' || text === '–û—Ç—á–µ—Ç –∑–∞ –ø–æ–ª –≥–æ–¥–∞') {
      if (!isPlanEnabled('analytics_week')) {
        await this.bot.sendMessage(chatId, '‚ùå *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö STANDARD –∏ PRO', { 
          parse_mode: 'Markdown' 
        });
        return;
      }
      await this.bot.sendMessage(chatId, `üìä *–í—ã –≤—ã–±—Ä–∞–ª–∏:* ${text}`, { 
        parse_mode: 'Markdown' 
      });
      await this.getAnalytics(chatId, text);
    } else if (text && !text.startsWith('/')) {
      await this.bot.sendMessage(chatId, '‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*', { 
        parse_mode: 'Markdown' 
      });
    }
  }

  async showAnalysis(chatId) {
    const keyboard = {
      reply_markup: {
        keyboard: [],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    if (isPlanEnabled('analytics_week')) {
      keyboard.reply_markup.keyboard.push(['–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å', '–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é']);
    }
    
    if (isPlanEnabled('analytics_6months')) {
      keyboard.reply_markup.keyboard.push(['–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü', '–û—Ç—á–µ—Ç –∑–∞ –ø–æ–ª –≥–æ–¥–∞']);
    }
    
    keyboard.reply_markup.keyboard.push(['–ù–∞–∑–∞–¥']);

    let analysisText = 'üìà *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:*\n\n';
    const plan = getSubscriptionPlan();
    analysisText += `üìã *–í–∞—à —Ç–∞—Ä–∏—Ñ:* ${plan.toUpperCase()}\n`;
    
    if (plan === 'standard') {
      analysisText += 'üìä *–î–æ—Å—Ç—É–ø–Ω–æ:* –æ—Ç—á–µ—Ç—ã –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é';
    } else if (plan === 'pro') {
      analysisText += 'üìä *–î–æ—Å—Ç—É–ø–Ω–æ:* –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏';
    }

    await this.bot.sendMessage(chatId, analysisText, { 
      ...keyboard,
      parse_mode: 'Markdown'
    });
  }

  async showSubscription(chatId) {
    const plan = getSubscriptionPlan();
    let subscriptionText = 'üíé *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\n';
    
    switch (plan) {
      case 'start':
        subscriptionText += 'üìã *–¢–∞—Ä–∏—Ñ: START*\n\n';
        subscriptionText += '‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n';
        subscriptionText += '‚úÖ Email –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n';
        subscriptionText += '‚ùå Telegram –±–æ—Ç\n';
        subscriptionText += '‚ùå –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫\n';
        subscriptionText += '‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n';
        subscriptionText += '–°–≤—è–∂–∏—Ç–µ—Å—å —Å [QAITECH](https://qaitech.ru) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ!';
        break;
      case 'standard':
        subscriptionText += 'üìã *–¢–∞—Ä–∏—Ñ: STANDARD*\n\n';
        subscriptionText += '‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n';
        subscriptionText += '‚úÖ Email –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n';
        subscriptionText += '‚úÖ Telegram –±–æ—Ç\n';
        subscriptionText += '‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞\n';
        subscriptionText += '‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n';
        subscriptionText += '‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤\n';
        subscriptionText += '‚ùå CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n\n';
        subscriptionText += '–°–≤—è–∂–∏—Ç–µ—Å—å —Å [QAITECH](https://qaitech.ru) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ PRO —Ç–∞—Ä–∏—Ñ!';
        break;
      case 'pro':
        subscriptionText += 'üìã *–¢–∞—Ä–∏—Ñ: PRO*\n\n';
        subscriptionText += '‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n';
        subscriptionText += '‚úÖ Email –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n';
        subscriptionText += '‚úÖ Telegram –±–æ—Ç\n';
        subscriptionText += '‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞\n';
        subscriptionText += '‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n';
        subscriptionText += '‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤\n';
        subscriptionText += '‚úÖ CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n\n';
        subscriptionText += 'üéâ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!*';
        break;
      default:
        subscriptionText += '‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ*\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å [QAITECH](https://qaitech.ru) –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!';
    }
    
    await this.bot.sendMessage(chatId, subscriptionText, { 
      parse_mode: 'Markdown' 
    });
  }

  async startTests(chatId) {
    logBot(`–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    
    let statusMessage = null;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤
      statusMessage = await this.bot.sendMessage(chatId, 'üîÑ *–¢–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ...*', { 
        parse_mode: 'Markdown' 
      });
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
      logBot('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
      const runResponse = await axios.get(`${process.env.THIS_ORIGIN || 'http://localhost:3000'}/api/bot/run_test/all`, {
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      logBot('–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:', runResponse.data);
      
      if (runResponse.data.status === 'error') {
        if (runResponse.data.data === 'Some tests is running') {
          await this.bot.editMessageText('‚ö†Ô∏è *–¢–µ—Å—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã*\n\n–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', {
            chat_id: chatId,
            message_id: statusMessage.message_id,
            parse_mode: 'Markdown'
          });
          return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        let errorText = '‚ùå *–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*';
        if (runResponse.data.data === '–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã') {
          errorText = '‚ùå *–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞';
        } else if (runResponse.data.data && runResponse.data.data.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã')) {
          errorText = '‚ùå *–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞';
        } else if (runResponse.data.data) {
          errorText = `‚ùå *–û—à–∏–±–∫–∞:* ${runResponse.data.data}`;
        }
        
        await this.bot.editMessageText(errorText, {
          chat_id: chatId,
          message_id: statusMessage.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }

      if (runResponse.data.status === 'progress') {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã..."
        await this.bot.editMessageText('üìä *–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã...*\n\n–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', {
          chat_id: chatId,
          message_id: statusMessage.message_id,
          parse_mode: 'Markdown'
        });
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã
        logBot('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...');
        await this.waitForReportsAndSend(chatId, statusMessage);
        return;
      }

      // –ï—Å–ª–∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç—á–µ—Ç—ã
      if (runResponse.data.status === 'success' && runResponse.data.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã"
        await this.bot.editMessageText('üü¢ *–û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã*\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...', {
          chat_id: chatId,
          message_id: statusMessage.message_id,
          parse_mode: 'Markdown'
        });
        
        await this.sendReports(chatId, runResponse.data.data);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
        await this.bot.deleteMessage(chatId, statusMessage.message_id);
      }

    } catch (error) {
      logBot('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error.message);
      
      let errorMessage = '‚ùå *–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*';
      
      if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
        errorMessage = 'üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout') || error.message.includes('socket hang up')) {
        errorMessage = 'üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.response && error.response.status >= 500) {
        errorMessage = 'üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      if (statusMessage) {
        await this.bot.editMessageText(errorMessage, {
          chat_id: chatId,
          message_id: statusMessage.message_id,
          parse_mode: 'Markdown'
        });
      } else {
        await this.bot.sendMessage(chatId, errorMessage, { 
          parse_mode: 'Markdown' 
        });
      }
    }
  }

  async waitForReportsAndSend(chatId, statusMessage) {
    logBot(`–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    
    let attempts = 0;
    const maxAttempts = 30; // 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 10 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
    
    while (attempts < maxAttempts) {
      try {
        logBot(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ ${attempts + 1}/${maxAttempts} –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        const reportsResponse = await axios.get(`${process.env.THIS_ORIGIN || 'http://localhost:3000'}/api/bot/get_reports`, {
          timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        if (reportsResponse.data.status === 'success' && reportsResponse.data.data && reportsResponse.data.data.length > 0) {
          logBot(`–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${reportsResponse.data.data.length} –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã"
          await this.bot.editMessageText('‚úÖ *–û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã*\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...', {
            chat_id: chatId,
            message_id: statusMessage.message_id,
            parse_mode: 'Markdown'
          });
          
          await this.sendReports(chatId, reportsResponse.data.data);
          
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
          await this.bot.deleteMessage(chatId, statusMessage.message_id);
          return;
        } else if (reportsResponse.data.status === 'error') {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç API
          let errorText = '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤*';
          if (reportsResponse.data.data === '–û—Ç—á–µ—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã') {
            errorText = 'üìä *–û—Ç—á–µ—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã*\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...';
          } else if (reportsResponse.data.data === '–ù–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã') {
            errorText = 'üìä *–ù–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã*\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...';
          } else if (reportsResponse.data.data === '–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã') {
            errorText = '‚ùå *–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤';
            await this.bot.editMessageText(errorText, {
              chat_id: chatId,
              message_id: statusMessage.message_id,
              parse_mode: 'Markdown'
            });
            return;
          } else if (reportsResponse.data.data) {
            errorText = `‚ùå *–û—à–∏–±–∫–∞:* ${reportsResponse.data.data}`;
          }
          
          logBot(`–û—à–∏–±–∫–∞ –æ—Ç API: ${reportsResponse.data.data}`);
          await new Promise(resolve => setTimeout(resolve, 10000));
          attempts++;
          continue;
        } else {
          logBot(`–û—Ç—á–µ—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —á–∞—Ç–∞ ${chatId}, –æ–∂–∏–¥–∞–Ω–∏–µ...`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
          const progressText = `üìä *–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã...*\n\n–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts}\n–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`;
          await this.bot.editMessageText(progressText, {
            chat_id: chatId,
            message_id: statusMessage.message_id,
            parse_mode: 'Markdown'
          });
          
          await new Promise(resolve => setTimeout(resolve, 10000)); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
          attempts++;
        }
      } catch (error) {
        logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        
        if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT' || 
            (error.response && error.response.status >= 500)) {
          await this.bot.editMessageText('üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: statusMessage.message_id,
            parse_mode: 'Markdown'
          });
          return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 10000));
        attempts++;
      }
    }
    
    logBot(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    await this.bot.editMessageText('‚è∞ *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–∑–∂–µ', {
      chat_id: chatId,
      message_id: statusMessage.message_id,
      parse_mode: 'Markdown'
    });
  }

  async sendReports(chatId, reports) {
    logBot(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${reports.length} –æ—Ç—á–µ—Ç–æ–≤ –≤ —á–∞—Ç ${chatId}`);
    
    let totalTests = reports.length;
    let passedTests = 0;
    let failedTests = 0;
    
    for (let i = 0; i < reports.length; i++) {
      const testData = reports[i];
      const reportText = this.formatReport(testData, i);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (testData.Report && testData.Report.length > 0) {
        const report = testData.Report[0];
        if (report.status === true) {
          passedTests++;
        } else {
          failedTests++;
        }
      }
      
      try {
        await this.bot.sendMessage(chatId, reportText, { 
          disable_web_page_preview: true,
          parse_mode: 'Markdown'
        });
        logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç ${i + 1}/${reports.length} –≤ —á–∞—Ç ${chatId}`);

        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 1000));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–∞—á–∫–∞–º–∏ –ø–æ 10 (–∞–ª—å–±–æ–º–∞–º–∏)
        if (testData.Report && testData.Report[0] && testData.Report[0].ReportStep) {
          const screenshots = [];
          for (const step of testData.Report[0].ReportStep) {
            if (step.Screenshot && step.Screenshot.data) {
              const imageBuffer = Buffer.from(step.Screenshot.data, 'base64');
              const tempFile = temp.path({ suffix: '.png' });
              fs.writeFileSync(tempFile, imageBuffer);
              screenshots.push({
                type: 'photo',
                media: fs.createReadStream(tempFile)
              });
            }
          }
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–∞—á–∫–∞–º–∏ –ø–æ 10
          for (let j = 0; j < screenshots.length; j += 10) {
            const album = screenshots.slice(j, j + 10);
            try {
              await this.bot.sendMediaGroup(chatId, album);
              // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
              if (j + 10 < screenshots.length) {
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            } catch (error) {
              if (error.message.includes('429')) {
                logBot(`Rate limit –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...`);
                await new Promise(resolve => setTimeout(resolve, 5000));
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                await this.bot.sendMediaGroup(chatId, album);
              } else {
                throw error;
              }
            }
          }
          logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ ${i + 1} –≤ —á–∞—Ç ${chatId}`);
        }

        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ—Ç—á–µ—Ç–∞–º–∏
        if (i < reports.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }

      } catch (error) {
        logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ ${i + 1} –≤ —á–∞—Ç ${chatId}:`, error.message);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting
        if (error.message.includes('429')) {
          const retryAfter = error.message.match(/retry after (\d+)/);
          const waitTime = retryAfter ? parseInt(retryAfter[1]) * 1000 : 5000;
          logBot(`Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ ${waitTime/1000} —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
          try {
            await this.bot.sendMessage(chatId, reportText, { 
              disable_web_page_preview: true,
              parse_mode: 'Markdown'
            });
            logBot(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ ${i + 1} —É—Å–ø–µ—à–Ω–∞`);
          } catch (retryError) {
            logBot(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, retryError.message);
          }
        }
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
    await this.sendTestSummary(chatId, totalTests, passedTests, failedTests);
    
    logBot(`–í—Å–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç ${chatId}`);
  }

  async sendTestSummary(chatId, totalTests, passedTests, failedTests) {
    const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : '0.0';
    const failureRate = totalTests > 0 ? ((failedTests / totalTests) * 100).toFixed(1) : '0.0';
    
    let summaryText = 'üìä *–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢*\n\n';
    summaryText += `üî¢ *–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:* ${totalTests}\n`;
    summaryText += `‚úÖ *–ü—Ä–æ–π–¥–µ–Ω–æ:* ${passedTests} (${successRate}%)\n`;
    summaryText += `‚ùå *–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:* ${failedTests} (${failureRate}%)\n\n`;
    
    if (passedTests === totalTests) {
      summaryText += 'üéâ *–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!*';
    } else if (failedTests === totalTests) {
      summaryText += '‚ö†Ô∏è *–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!*';
    } else {
      summaryText += '‚ö†Ô∏è *–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.*';
    }
    
    try {
      await this.bot.sendMessage(chatId, summaryText, { 
        parse_mode: 'Markdown' 
      });
      logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ —á–∞—Ç ${chatId}`);
    } catch (error) {
      logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –≤ —á–∞—Ç ${chatId}:`, error.message);
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
    await this.sendAlertIfFailedTests(failedTests, totalTests);
  }

  async getAnalytics(chatId, period) {
    logBot(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ "${period}" –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    
    try {
      const response = await axios.get(`${process.env.THIS_ORIGIN || 'http://localhost:3000'}/api/bot/get_analytics/${encodeURIComponent(period)}`, {
        timeout: 20000 // 20 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      if (response.data.status === 'error') {
        await this.bot.sendMessage(chatId, '‚ùå *–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*', { 
          parse_mode: 'Markdown' 
        });
        return;
      }

      const analyticsText = this.formatAnalytics(response.data.data);
      await this.bot.sendMessage(chatId, analyticsText, { 
        parse_mode: 'Markdown' 
      });
      logBot(`–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç ${chatId}`);

    } catch (error) {
      logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
      
      let errorMessage = '‚ùå *–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*';
      
      if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT' || 
          (error.response && error.response.status >= 500)) {
        errorMessage = 'üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      await this.bot.sendMessage(chatId, errorMessage, { 
        parse_mode: 'Markdown' 
      });
    }
  }

  formatReport(testData, index, opts = {}) {
    // opts.autoReport ‚Äî –µ—Å–ª–∏ true, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞
    if (!testData.Report || testData.Report.length === 0) {
      return `${opts.autoReport ? '*–ê–í–¢–û–û–¢–ß–ï–¢ –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ*\n\n' : ''}*–¢–µ—Å—Ç ¬´${testData.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}¬ª:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞`;
    }
    const report = testData.Report[0];
    let result = '';
    if (opts.autoReport) {
      result += '*–ê–í–¢–û–û–¢–ß–ï–¢ –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ*\n\n';
    }
    if (report.status === true) {
      result += `‚úÖ *–¢–µ—Å—Ç ¬´${testData.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}¬ª –ø—Ä–æ–π–¥–µ–Ω*\n`;
    } else {
      result += `‚ùå *–¢–µ—Å—Ç ¬´${testData.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}¬ª –Ω–µ –ø—Ä–æ–π–¥–µ–Ω*\n`;
    }
    if (report.ReportStep && report.ReportStep.length > 0) {
      for (const step of report.ReportStep) {
        let stepText = step.value || step.description || '–®–∞–≥ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        // –¢–æ–ª—å–∫–æ URL –≤ —à–∞–≥–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
        stepText = replaceUrlWithHyperlink(stepText);
        if (step.status === true) {
          result += `‚úÖ ${stepText}\n`;
        } else {
          result += `‚ùå ${stepText}\n`;
        }
      }
      result += '\nüì∏ *–°–∫—Ä–∏–Ω—à–æ—Ç—ã —à–∞–≥–æ–≤:*\n';
    }
    return result;
  }

  formatAnalytics(data) {
    // –ê–Ω–∞–ª–æ–≥ returnAnalitycs.py
    if (!data || (Array.isArray(data) && data.length === 0) || Object.keys(data).length === 0) {
      return '*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è*';
    }
    // –ï—Å–ª–∏ data ‚Äî –º–∞—Å—Å–∏–≤ (–∫–∞–∫ –≤ Python-–±–æ—Ç–µ)
    if (Array.isArray(data)) {
      const total = data.length;
      const successCount = data.filter(item => item.status === true).length;
      const failCount = total - successCount;
      const percentSuccess = total > 0 ? (successCount / total * 100).toFixed(1) : '0.0';
      const percentFail = total > 0 ? (failCount / total * 100).toFixed(1) : '0.0';
      let text = `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n`;
      text += `‚úÖ *–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:* ${total}\n`;
      text += `üîÑ *–ß–∞—Å—Ç–æ—Ç–∞:* —Ä–∞–∑ –≤ —á–∞—Å\n`;
      text += `üü¢ *–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:* ${successCount} (${percentSuccess}%)\n`;
      text += `üî¥ *–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö / –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö:* ${failCount} (${percentFail}%)\n`;
      // –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
      text = returnHyperlink(text);
      return text;
    }
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ä–µ–∫—Ç)
    let result = '*üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n';
    if (data.totalTests !== undefined) {
      result += `*–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:* ${data.totalTests}\n`;
    }
    if (data.passedTests !== undefined) {
      result += `*–ü—Ä–æ–π–¥–µ–Ω–æ:* ${data.passedTests}\n`;
    }
    if (data.failedTests !== undefined) {
      result += `*–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:* ${data.failedTests}\n`;
    }
    if (data.successRate !== undefined) {
      result += `*–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:* ${data.successRate}%\n`;
    }
    if (data.averageExecutionTime !== undefined) {
      result += `*–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${data.averageExecutionTime}–º—Å\n`;
    }
    // –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
    result = returnHyperlink(result);
    return result;
  }

  async stop() {
    if (this.bot) {
      logBot('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...');
      await this.bot.stopPolling();
      this.isRunning = false;
      logBot('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  isBotRunning() {
    return this.isRunning;
  }

  async sendScheduledReports(chatId, reports) {
    logBot(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${reports.length} –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ —á–∞—Ç ${chatId}`);
    
    let totalTests = reports.length;
    let passedTests = 0;
    let failedTests = 0;
    
    for (let i = 0; i < reports.length; i++) {
      const testData = reports[i];
      // –ü–µ—Ä–µ–¥–∞–µ–º opts.autoReport = true –¥–ª—è –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞
      const reportText = this.formatReport(testData, i, { autoReport: true });
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (testData.Report && testData.Report.length > 0) {
        const report = testData.Report[0];
        if (report.status === true) {
          passedTests++;
        } else {
          failedTests++;
        }
      }
      
      try {
        await this.bot.sendMessage(chatId, reportText, {
          disable_web_page_preview: true,
          parse_mode: 'Markdown'
        });
        logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–æ—Ç—á–µ—Ç ${i + 1}/${reports.length} –≤ —á–∞—Ç ${chatId}`);
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if (testData.Report && testData.Report[0] && testData.Report[0].ReportStep) {
          const screenshots = [];
          for (const step of testData.Report[0].ReportStep) {
            if (step.Screenshot && step.Screenshot.data) {
              const imageBuffer = Buffer.from(step.Screenshot.data, 'base64');
              const tempFile = require('temp').path({ suffix: '.png' });
              require('fs').writeFileSync(tempFile, imageBuffer);
              screenshots.push({
                type: 'photo',
                media: require('fs').createReadStream(tempFile)
              });
            }
          }
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–∞—á–∫–∞–º–∏ –ø–æ 10
          for (let j = 0; j < screenshots.length; j += 10) {
            const album = screenshots.slice(j, j + 10);
            try {
              await this.bot.sendMediaGroup(chatId, album);
              // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
              if (j + 10 < screenshots.length) {
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            } catch (error) {
              if (error.message.includes('429')) {
                logBot(`Rate limit –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...`);
                await new Promise(resolve => setTimeout(resolve, 5000));
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                await this.bot.sendMediaGroup(chatId, album);
              } else {
                throw error;
              }
            }
          }
          logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞ ${i + 1} –≤ —á–∞—Ç ${chatId}`);
        }
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞–º–∏
        if (i < reports.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
      } catch (error) {
        logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞ ${i + 1} –≤ —á–∞—Ç ${chatId}:`, error.message);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting –¥–ª—è –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–æ–≤
        if (error.message.includes('429')) {
          const retryAfter = error.message.match(/retry after (\d+)/);
          const waitTime = retryAfter ? parseInt(retryAfter[1]) * 1000 : 5000;
          logBot(`Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ ${waitTime/1000} —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
          try {
            await this.bot.sendMessage(chatId, reportText, {
              disable_web_page_preview: true,
              parse_mode: 'Markdown'
            });
            logBot(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞ ${i + 1} —É—Å–ø–µ—à–Ω–∞`);
          } catch (retryError) {
            logBot(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, retryError.message);
          }
        }
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–æ–≤
    await this.sendScheduledTestSummary(chatId, totalTests, passedTests, failedTests);
    
    logBot(`–í—Å–µ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç ${chatId}`);
  }

  async sendScheduledTestSummary(chatId, totalTests, passedTests, failedTests) {
    const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : '0.0';
    const failureRate = totalTests > 0 ? ((failedTests / totalTests) * 100).toFixed(1) : '0.0';
    
    let summaryText = 'üìä *–ê–í–¢–û–û–¢–ß–ï–¢ –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ*\n\n';
    summaryText += `üî¢ *–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:* ${totalTests}\n`;
    summaryText += `‚úÖ *–ü—Ä–æ–π–¥–µ–Ω–æ:* ${passedTests} (${successRate}%)\n`;
    summaryText += `‚ùå *–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:* ${failedTests} (${failureRate}%)\n\n`;
    
    if (passedTests === totalTests) {
      summaryText += 'üéâ *–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!*';
    } else if (passedTests > failedTests) {
      summaryText += 'üëç *–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ.*';
    } else if (failedTests === totalTests) {
      summaryText += '‚ö†Ô∏è *–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!*';
    } else {
      summaryText += '‚ö†Ô∏è *–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.*';
    }
    
    try {
      await this.bot.sendMessage(chatId, summaryText, { 
        parse_mode: 'Markdown' 
      });
      logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç ${chatId}`);
    } catch (error) {
      logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –∞–≤—Ç–æ–æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç ${chatId}:`, error.message);
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
    await this.sendAlertIfFailedTests(failedTests, totalTests);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
  async sendAlertIfFailedTests(failedTests, totalTests) {
    if (failedTests > 0 && process.env.TELEGRAM_ALERT_CHAT_ID) {
      const alertText = `üö® *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã!\n\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests} –∏–∑ ${totalTests}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á—ë—Ç—ã –∏ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã!`;
      try {
        await this.bot.sendMessage(process.env.TELEGRAM_ALERT_CHAT_ID, alertText, { parse_mode: 'Markdown' });
        logBot(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–ª–µ—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –≤ —á–∞—Ç ${process.env.TELEGRAM_ALERT_CHAT_ID}`);
      } catch (error) {
        logBot(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è:`, error.message);
      }
    }
  }
}

module.exports = new TelegramBotService(); 